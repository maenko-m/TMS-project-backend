// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TmsSolution.Infrastructure.Data;

#nullable disable

namespace TmsSolution.Infrastructure.Migrations
{
    [DbContext(typeof(TmsDbContext))]
    partial class TmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TmsSolution.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TestStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TestStepId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Defect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<Guid?>("TestCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TestRunId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestRunId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("IconBase64")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.ProjectUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.SharedStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("SharedSteps");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TestCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TestRunId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestRunId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postconditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preconditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SuiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SuiteId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestCaseSharedStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("SharedStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SharedStepId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestCaseSharedSteps");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("TestPlans");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestPlanTestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestPlanId");

                    b.ToTable("TestPlanTestCases");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Environment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestRunTestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExecutionTime")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestRunId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestRunId");

                    b.HasIndex("UserId");

                    b.ToTable("TestRunTestCases");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestSteps");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestSuite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Preconditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TestSuites");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IconBase64")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.Project", "Project")
                        .WithMany("Attachments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.TestStep", null)
                        .WithMany("Attachments")
                        .HasForeignKey("TestStepId");

                    b.HasOne("TmsSolution.Domain.Entities.User", "UploadedBy")
                        .WithMany("UploadedAttachments")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Defect", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.User", "CreatedBy")
                        .WithMany("CreatedDefects")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.Project", "Project")
                        .WithMany("Defects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.TestCase", "TestCase")
                        .WithMany("Defects")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TmsSolution.Domain.Entities.TestRun", "TestRun")
                        .WithMany("Defects")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("TestCase");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Milestone", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Project", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.ProjectUser", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.User", "User")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.SharedStep", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.User", "CreatedBy")
                        .WithMany("CreatedSharedSteps")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.Project", "Project")
                        .WithMany("SharedSteps")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Tag", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.Project", null)
                        .WithMany("Tags")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TmsSolution.Domain.Entities.TestCase", null)
                        .WithMany("Tags")
                        .HasForeignKey("TestCaseId");

                    b.HasOne("TmsSolution.Domain.Entities.TestRun", null)
                        .WithMany("Tags")
                        .HasForeignKey("TestRunId");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestCase", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.User", "CreatedBy")
                        .WithMany("CreatedTestCases")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.Project", "Project")
                        .WithMany("TestCases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.TestSuite", "Suite")
                        .WithMany("TestCases")
                        .HasForeignKey("SuiteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Suite");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestCaseSharedStep", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.SharedStep", "SharedStep")
                        .WithMany("TestCaseSharedSteps")
                        .HasForeignKey("SharedStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.TestCase", "TestCase")
                        .WithMany("SharedSteps")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SharedStep");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestPlan", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.User", "CreatedBy")
                        .WithMany("CreatedTestPlans")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.Project", "Project")
                        .WithMany("TestPlans")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestPlanTestCase", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.TestCase", "TestCase")
                        .WithMany("TestPlanTestCases")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.TestPlan", "TestPlan")
                        .WithMany("TestPlanTestCases")
                        .HasForeignKey("TestPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");

                    b.Navigation("TestPlan");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestRun", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.Milestone", "Milestone")
                        .WithMany("TestRuns")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TmsSolution.Domain.Entities.Project", "Project")
                        .WithMany("TestRuns")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.User", null)
                        .WithMany("AssignedTestRuns")
                        .HasForeignKey("UserId");

                    b.Navigation("Milestone");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestRunTestCase", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.TestCase", "TestCase")
                        .WithMany("TestRunTestCases")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.TestRun", "TestRun")
                        .WithMany("TestRunTestCases")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TmsSolution.Domain.Entities.User", null)
                        .WithMany("AssignedTestRunTestCases")
                        .HasForeignKey("UserId");

                    b.Navigation("TestCase");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestStep", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.TestCase", "TestCase")
                        .WithMany("Steps")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestSuite", b =>
                {
                    b.HasOne("TmsSolution.Domain.Entities.Project", "Project")
                        .WithMany("TestSuites")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Milestone", b =>
                {
                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.Project", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Defects");

                    b.Navigation("Milestones");

                    b.Navigation("ProjectUsers");

                    b.Navigation("SharedSteps");

                    b.Navigation("Tags");

                    b.Navigation("TestCases");

                    b.Navigation("TestPlans");

                    b.Navigation("TestRuns");

                    b.Navigation("TestSuites");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.SharedStep", b =>
                {
                    b.Navigation("TestCaseSharedSteps");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestCase", b =>
                {
                    b.Navigation("Defects");

                    b.Navigation("SharedSteps");

                    b.Navigation("Steps");

                    b.Navigation("Tags");

                    b.Navigation("TestPlanTestCases");

                    b.Navigation("TestRunTestCases");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestPlan", b =>
                {
                    b.Navigation("TestPlanTestCases");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestRun", b =>
                {
                    b.Navigation("Defects");

                    b.Navigation("Tags");

                    b.Navigation("TestRunTestCases");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestStep", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.TestSuite", b =>
                {
                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("TmsSolution.Domain.Entities.User", b =>
                {
                    b.Navigation("AssignedTestRunTestCases");

                    b.Navigation("AssignedTestRuns");

                    b.Navigation("CreatedDefects");

                    b.Navigation("CreatedSharedSteps");

                    b.Navigation("CreatedTestCases");

                    b.Navigation("CreatedTestPlans");

                    b.Navigation("OwnedProjects");

                    b.Navigation("ProjectUsers");

                    b.Navigation("UploadedAttachments");
                });
#pragma warning restore 612, 618
        }
    }
}
